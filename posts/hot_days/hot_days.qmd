---
title: "Hot Days"
format: html
author: "Jesse Onland"
date: "2024-07-11"
draft: true
---

```{r}
#| label: libraries
#| include: false

library(tidyverse)
library(showtext)

font_add_google("Tinos")
showtext_auto() 

Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 8)
```

## Original Graphic

Our goal is to recreate the graphic below, originally posted by [Chris Martz](https://x.com/ChrisMartzWX) on X. He says, 

> This plot shows the average number of days per year with daily maximum temperatures ≥95°, ≥100° and ≥105° per USHCN station since 1895. The trend is down.

[![Original data graphic]("original.jpg")]

## Data Visualization Reproducibility

_Reproducibility_ refers to a set of practices which ensure that a data product can be recreated by someone other than its author(s) in order to verify it. This concept applies as well to data visualization as it does to statistical analyses and machine learning models.

Unfortunately, the graphic above is not very reproducible because it's unclear exactly how it was created. It includes a note about the data source, but the provided URL doesn't link to a specific data set. There's also no indication of what software was used, and in particular there's no code we can run to generate our own copy of it.

We'll have to do our best to recreate it "by hand".

## Getting the Data

The closest USHCN data set I was able to find easily is a TSV of daily maximum temperatures for weather stations in the US. First we download it and store it locally. Note that the `read_*()` and `write_*()` family of functions from `readr` can zip and unzip files automatically according to the file extensions.

```{r}
#| label: download
#| eval: false

"https://iridl.ldeo.columbia.edu/SOURCES/.CDIAC/.USHCN/.daily/tmax/tmax/[T]data.tsv" |>
  url() |>
  read_tsv() |>
  write_tsv(file = "tmax.gz")  
```

Next we read the data into a data frame.

```{r}
#| label: data
#| eval: false

"tmax.gz" |>
  read_tsv(na = "-99") ->
  tmax_data

tmax_data |>
  set_names(\(x) str_c("day_", seq_along(x))) |>
  rownames_to_column(var = "station") |>
  pivot_longer(
    cols = starts_with("day_"), 
    names_to = "day", 
    names_prefix = "day_") |>
  drop_na() |>
  mutate(date = ymd(18490101) + days(day)) ->
  tmax_data
```

For each year, we need the proporations of days which were 95‒99°F, 100‒104°F, and 105°F or greater.

```{r}
#| label: summarize
#| eval: false

tmax_data |>
  mutate(year = year(date)) |>
  filter(year > 1894) |>
  select(year, value) |>
  group_by(year) |>
  summarize(
    above_95  = sum(between(value,  95,  99))/n(),
    above_100 = sum(between(value, 100, 104))/n(),
    above_105 = sum(value >= 105)/n()) |>
  pivot_longer(starts_with("above_"), names_to = "temp_threshold") |>
  mutate(
    temp_threshold = fct_relevel(temp_threshold, "above_95", "above_100")) ->
  tmax_data_thresholded
```

```{r}
#| label: read-plot-data
#| include: false

readRDS("tmax_data_thresholded.rds") ->
  tmax_data_thresholded
```

## Our Graphic

```{r}
#| label: our-graphic
#| out-width: 786px

tmax_data_thresholded |>
  ggplot(aes(x = year, y = value, fill = temp_threshold)) +
  geom_col(position = position_stack(), width = 0.8) +
  scale_x_continuous(
    expand = c(0, 0), 
    breaks = seq(1900, 2020, 20),
    labels = as.character(seq(1900, 2020, 20))) +
  scale_y_continuous(
    breaks = seq(0, 0.1, 0.01),
    labels = as.character(0:10),
    expand = c(0, 0)) +
  scale_fill_manual(
    values = c(
      "above_95" = "#fe7b4b",
      "above_100" = "#b02320",
      "above_105" = "#000000"),
    labels = paste0("Days ≥", seq(95, 105, 5), "°F")) +
  labs(
    title = "U.S. Observed Number of Very Hot Days Per Year 1895 to 2023",
    caption = "Data source: U.S. Historical Climatology Network",
    y = "Percent of Station-Days") +
  theme_bw(base_size = 12) +
  theme(
    aspect.ratio = 3/4,
    text = element_text(family = "Tinos"),
    axis.title.x = element_blank(),
    axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
    legend.position = c(0.85, 0.9),
    legend.title = element_blank(),
    panel.grid = element_blank())
```